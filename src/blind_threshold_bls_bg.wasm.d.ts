/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function keys_getShare(a: number, b: number, c: number): void;
export function keys_numShares(a: number): number;
export function keys_polynomial(a: number, b: number): void;
export function keys_thresholdPublicKey(a: number, b: number): void;
export function __wbg_keys_free(a: number): void;
export function __wbg_get_keys_t(a: number): number;
export function __wbg_set_keys_t(a: number, b: number): void;
export function __wbg_get_keys_n(a: number): number;
export function __wbg_set_keys_n(a: number, b: number): void;
export function keygen(a: number, b: number): number;
export function keypair_privateKey(a: number, b: number): void;
export function keypair_publicKey(a: number, b: number): void;
export function __wbg_keypair_free(a: number): void;
export function blindedmessage_message(a: number, b: number): void;
export function blindedmessage_blindingFactor(a: number, b: number): void;
export function __wbg_blindedmessage_free(a: number): void;
export function thresholdKeygen(a: number, b: number, c: number, d: number): number;
export function combine(a: number, b: number, c: number, d: number): void;
export function partialVerifyBlindSignature(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function partialVerify(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function partialSignBlindedMessage(a: number, b: number, c: number, d: number, e: number): void;
export function partialSign(a: number, b: number, c: number, d: number, e: number): void;
export function signBlindedMessage(a: number, b: number, c: number, d: number, e: number): void;
export function sign(a: number, b: number, c: number, d: number, e: number): void;
export function verifyBlindSignature(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function unblind(a: number, b: number, c: number, d: number, e: number): void;
export function blind(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
